{"remainingRequest":"C:\\Users\\abcd\\Desktop\\新建文件夹 (2)\\durian-group\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\abcd\\Desktop\\新建文件夹 (2)\\durian-group\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\abcd\\Desktop\\新建文件夹 (2)\\durian-group\\src\\utils\\request.js","mtime":1596163479628},{"path":"C:\\Users\\abcd\\Desktop\\新建文件夹 (2)\\durian-group\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\abcd\\Desktop\\新建文件夹 (2)\\durian-group\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCB7IGdldFRva2VuLCBjbGVhclRva2VuIH0gZnJvbSAiQC9zdG9yZS91c2VyIjsgLy8gY3JlYXRlIGFuIGF4aW9zIGluc3RhbmNlCgp2YXIgc2VydmljZSA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogImh0dHBzOi8vYXBpLm1lbmdkaWd1YS5jbi8iLAogIC8vIHVybCA9IGJhc2UgdXJsICsgcmVxdWVzdCB1cmwKICAvLyB3aXRoQ3JlZGVudGlhbHM6IHRydWUsIC8vIHNlbmQgY29va2llcyB3aGVuIGNyb3NzLWRvbWFpbiByZXF1ZXN0cwogIHRpbWVvdXQ6IDUwMDAgLy8gcmVxdWVzdCB0aW1lb3V0Cgp9KTsgLy8gcmVxdWVzdCBpbnRlcmNlcHRvcgoKc2VydmljZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykgewogIC8vIGRvIHNvbWV0aGluZyBiZWZvcmUgcmVxdWVzdCBpcyBzZW50CiAgdmFyIHRva2VuID0gZ2V0VG9rZW4oKTsKCiAgaWYgKHRva2VuKSB7CiAgICAvLyBsZXQgZWFjaCByZXF1ZXN0IGNhcnJ5IHRva2VuCiAgICAvLyBbJ1gtVG9rZW4nXSBpcyBhIGN1c3RvbSBoZWFkZXJzIGtleQogICAgLy8gcGxlYXNlIG1vZGlmeSBpdCBhY2NvcmRpbmcgdG8gdGhlIGFjdHVhbCBzaXR1YXRpb24KICAgIGNvbmZpZy5kYXRhWyJ0b2tlbiJdID0gdG9rZW47CiAgfQoKICByZXR1cm4gY29uZmlnOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAvLyBkbyBzb21ldGhpbmcgd2l0aCByZXF1ZXN0IGVycm9yCiAgY29uc29sZS5sb2coZXJyb3IpOyAvLyBmb3IgZGVidWcKCiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7IC8vIHJlc3BvbnNlIGludGVyY2VwdG9yCgpzZXJ2aWNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoCi8qKg0KICogSWYgeW91IHdhbnQgdG8gZ2V0IGh0dHAgaW5mb3JtYXRpb24gc3VjaCBhcyBoZWFkZXJzIG9yIHN0YXR1cw0KICogUGxlYXNlIHJldHVybiAgcmVzcG9uc2UgPT4gcmVzcG9uc2UNCiAqLwoKLyoqDQogKiBEZXRlcm1pbmUgdGhlIHJlcXVlc3Qgc3RhdHVzIGJ5IGN1c3RvbSBjb2RlDQogKiBIZXJlIGlzIGp1c3QgYW4gZXhhbXBsZQ0KICogWW91IGNhbiBhbHNvIGp1ZGdlIHRoZSBzdGF0dXMgYnkgSFRUUCBTdGF0dXMgQ29kZQ0KICovCmZ1bmN0aW9uIChyZXNwb25zZSkgewogIHZhciByZXMgPSByZXNwb25zZS5kYXRhOyAvLyBpZiB0aGUgY3VzdG9tIGNvZGUgaXMgbm90IDIwMDAwLCBpdCBpcyBqdWRnZWQgYXMgYW4gZXJyb3IuCgogIGlmIChyZXMuZXJyY29kZSAhPT0gMCkgewogICAgLy8gNTAwMDg6IElsbGVnYWwgdG9rZW47IDUwMDEyOiBPdGhlciBjbGllbnRzIGxvZ2dlZCBpbjsgNTAwMTQ6IFRva2VuIGV4cGlyZWQ7CiAgICBpZiAocmVzLmVycmNvZGUgPT09IDUwMDA4IHx8IHJlcy5lcnJjb2RlID09PSA1MDAxMiB8fCByZXMuZXJyY29kZSA9PT0gNTAwMTQgfHwgcmVzLmVycmNvZGUgPT09IDEwMDAwKSB7CiAgICAgIC8vIHRvIHJlLWxvZ2luCiAgICAgIGNsZWFyVG9rZW4oKTsKICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICB9CgogICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihyZXMuZXJybXNnIHx8ICJFcnJvciIpKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHJlcy5kYXRhOwogIH0KfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgY29uc29sZS5sb2coImVyciIgKyBlcnJvcik7IC8vIGZvciBkZWJ1ZwoKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsKZXhwb3J0IGRlZmF1bHQgc2VydmljZTs="},{"version":3,"sources":["C:/Users/abcd/Desktop/新建文件夹 (2)/durian-group/src/utils/request.js"],"names":["axios","getToken","clearToken","service","create","baseURL","timeout","interceptors","request","use","config","token","data","error","console","log","Promise","reject","response","res","errcode","location","reload","Error","errmsg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC,C,CAEA;;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,2BADkB;AACW;AACtC;AACAC,EAAAA,OAAO,EAAE,IAHkB,CAGZ;;AAHY,CAAb,CAAhB,C,CAMA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACE,UAACC,MAAD,EAAY;AACV;AAEA,MAAMC,KAAK,GAAGV,QAAQ,EAAtB;;AACA,MAAIU,KAAJ,EAAW;AACT;AACA;AACA;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAY,OAAZ,IAAuBD,KAAvB;AACD;;AACD,SAAOD,MAAP;AACD,CAZH,EAaE,UAACG,KAAD,EAAW;AACT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFS,CAEW;;AACpB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAjBH,E,CAoBA;;AACAV,OAAO,CAACI,YAAR,CAAqBW,QAArB,CAA8BT,GAA9B;AACE;;;;;AAKA;;;;;AAKA,UAACS,QAAD,EAAc;AACZ,MAAMC,GAAG,GAAGD,QAAQ,CAACN,IAArB,CADY,CAGZ;;AACA,MAAIO,GAAG,CAACC,OAAJ,KAAgB,CAApB,EAAuB;AACrB;AACA,QACED,GAAG,CAACC,OAAJ,KAAgB,KAAhB,IACAD,GAAG,CAACC,OAAJ,KAAgB,KADhB,IAEAD,GAAG,CAACC,OAAJ,KAAgB,KAFhB,IAGAD,GAAG,CAACC,OAAJ,KAAgB,KAJlB,EAKE;AACA;AACAlB,MAAAA,UAAU;AACVmB,MAAAA,QAAQ,CAACC,MAAT;AACD;;AACD,WAAON,OAAO,CAACC,MAAR,CAAe,IAAIM,KAAJ,CAAUJ,GAAG,CAACK,MAAJ,IAAc,OAAxB,CAAf,CAAP;AACD,GAbD,MAaO;AACL,WAAOL,GAAG,CAACP,IAAX;AACD;AACF,CA/BH,EAgCE,UAACC,KAAD,EAAW;AACTC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADS,CACmB;;AAC5B,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAnCH;AAsCA,eAAeV,OAAf","sourcesContent":["import axios from \"axios\";\r\nimport { getToken, clearToken } from \"@/store/user\";\r\n\r\n// create an axios instance\r\nconst service = axios.create({\r\n  baseURL: \"https://api.mengdigua.cn/\", // url = base url + request url\r\n  // withCredentials: true, // send cookies when cross-domain requests\r\n  timeout: 5000, // request timeout\r\n});\r\n\r\n// request interceptor\r\nservice.interceptors.request.use(\r\n  (config) => {\r\n    // do something before request is sent\r\n\r\n    const token = getToken();\r\n    if (token) {\r\n      // let each request carry token\r\n      // ['X-Token'] is a custom headers key\r\n      // please modify it according to the actual situation\r\n      config.data[\"token\"] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // do something with request error\r\n    console.log(error); // for debug\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// response interceptor\r\nservice.interceptors.response.use(\r\n  /**\r\n   * If you want to get http information such as headers or status\r\n   * Please return  response => response\r\n   */\r\n\r\n  /**\r\n   * Determine the request status by custom code\r\n   * Here is just an example\r\n   * You can also judge the status by HTTP Status Code\r\n   */\r\n  (response) => {\r\n    const res = response.data;\r\n\r\n    // if the custom code is not 20000, it is judged as an error.\r\n    if (res.errcode !== 0) {\r\n      // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\r\n      if (\r\n        res.errcode === 50008 ||\r\n        res.errcode === 50012 ||\r\n        res.errcode === 50014 ||\r\n        res.errcode === 10000\r\n      ) {\r\n        // to re-login\r\n        clearToken();\r\n        location.reload();\r\n      }\r\n      return Promise.reject(new Error(res.errmsg || \"Error\"));\r\n    } else {\r\n      return res.data;\r\n    }\r\n  },\r\n  (error) => {\r\n    console.log(\"err\" + error); // for debug\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default service;\r\n"]}]}